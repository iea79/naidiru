// Mixin =======================================================================
@mixin browser($browsers: flexible) {
  @each $browser in $browsers {
    html[data-browser*="#{$browser}"] & {
      @content;
    }
  }
}


@mixin border-radius($radius) {
	border-radius: $radius;
}
@mixin trs($time) {
	transition: $time;
}


@mixin rotate($deg) {
	-webkit-transform: rotate($deg);
	-moz-transform: rotate($deg);
	-ms-transform: rotate($deg);
	-o-transform: rotate($deg);
	transform: rotate($deg);
}
@mixin justify-content($position) {
	justify-content:$position;
}
@mixin flex-basis($percentage) {
	flex-basis:$percentage;
}
@mixin box-sizing($border-box) {
	-webkit-box-sizing: $border-box;
	-moz-box-sizing: $border-box;
	box-sizing: $border-box;
}

@mixin columns-text($columns, $columns-count, $gap, $rule, $style, $color) {
	-moz-columns: $columns $columns-count;
	-webkit-columns: $columns $columns-count;
	columns: $columns $columns-count;
	-moz-column-gap: $gap;
	-webkit-column-gap: $gap;
	column-gap: $gap;
	-moz-column-rule: $rule $style $color;
	-webkit-column-rule: $rule $style $color;
	column-rule: $rule $style $color
}


// Style for columns text 
// Используется для многоколоночного адаптивного текста, а также для списков
// $width - минимальная ширина колонок
// $count - количество колонок (при уменьшении экрана меняются автоматически в зависимости от первого значения)
// $padding - отступ между колонками
// $divider_widh - ширина разделительной линии между колонками
// $divider_line - стиль разделительной линии 
// $divider_color - цвет разделительной линии 
// Лишнее можно просто закомментировать
// ---------------------------------
// Example for html 
// div class="column"
// ---------------------------------
// Example for scss 
// .column {
// 	@include columns-text(300px, 3, 40px, 1px, solid, #000);
// }


// Float el clear
%clear_a {
	&:after {
		content: '';
		display: table;
		clear: both;
	}
}

%clear_b {
	&:before {
		content: '';
		display: table;
		clear: both;
	}
}

%clear_all {
	@extend %clear_a;
	@extend %clear_b;
}

// Transition speed for element
@mixin trs($trs_speed) {
	transition: all $trs_speed+s;}

@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}


// Placeholder for input
@mixin placeholder {
	&::-webkit-input-placeholder {@content};
	&:-moz-placeholder           {@content};
	&::-moz-placeholder          {@content};
	&:-ms-input-placeholder      {@content}; 
}

// 
// @TODO: Add docs to flexbox!
// 
@mixin flexbox() {
	@supports (display: flex) {	
		display: -webkit-box;
		display: -moz-box;
		display: -webkit-flex;
		display: flex;
		display: -ms-flexbox;
		display: -ms-flex;
		&>* {
			display: block;
		}
	}
	@include browser("not-flex") {	
		display: block;
		font-size: 0;
		line-height: 0;
		letter-spacing: -1px;
		&>* {
			// display: -moz-inline-stack!important;
			display: inline-block;
			vertical-align: top;
			letter-spacing:normal;
			line-height:normal;
			font-size: initial;
		}
	}
}
@mixin box-shadow($shadow...) {
	$shadow: set-arglist-default($shadow, default-box-shadow());
}
@mixin transform3d($trans) {
	@include transform($trans, true);
}
@mixin rotateY($rotate: $default-rotate, $perspective: false) {
	$trans: rotateY($rotate);
	@if $perspective {
		$trans: perspective($perspective) $trans;
	}
}

@mixin flex($values) {
	-webkit-box-flex: $values;
	-moz-box-flex:  $values;
	-webkit-flex:  $values;
	-ms-flex:  $values;
	flex:  $values;
}

@mixin order($val) {
	-webkit-order: $val;  
	-ms-order: $val;  
	order: $val;
}

// 
// @TODO: Add docs to flex-flow!
// flex-flow: flex-direction flex-wrap|initial|inherit;
//
@mixin flex-flow($params) {
	-webkit-flex-flow: $params; /* Safari 6.1+ */
	-ms-flex-flow: $params;
	flex-flow: $params;
}

// 
// @TODO: Add docs to justify-content!
// justify-content: flex-start|flex-end|center|space-between|space-around|initial|inherit;
// 
@mixin justify-content($params) {
    -webkit-justify-content: $params; /* Safari 6.1+ */
    -ms-justify-content: $params;
    justify-content: $params;
}

// 
// @TODO: Add docs to     -webkit-align-content!
// The align-content property aligns a flex container’s lines within the flex container when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis. Note, this property has no effect on a single-line flex container. Values have the following meanings:
@mixin align-content($params) {
	-webkit-align-content: $params;
	-ms-align-content: $params;
	align-content: $params;
}

// 
// @TODO: Add docs to     -webkit-flex-grow!
// The flex-grow property sets the flex grow factor to the provided <number>. Negative numbers are invalid.
@mixin flex-grow($params) {
	-webkit-flex-grow: $params;
	-ms-flex-grow: $params;
	flex-grow: $params;
}

//
// @TODO: Add docs to     -webkit-flex-shrink!
// The flex-shrink property sets the flex shrink factor to the provided <number>. Negative numbers are invalid.
@mixin flex-shrink($params) {
	-webkit-flex-shrink: $params;
	-ms-flex-shrink: $params;
	flex-shrink: $params;
}

// 
// @TODO: Add docs to     -webkit-flex-basis!
// The flex-basis property sets the flex basis. It accepts the same values as the width and height property, plus content.
@mixin flex-basis($params) {
	// -webkit-flex-basis: $params;
	// -ms-flex-basis: $params;
	// flex-basis: $params;
	width: $params;
	// @include browser("Android 4.1" "Android 4.2" "Android 4.3" "iPhone OS 7" "iPhone OS 8" "MSIE 9") {	
	// }
}

// 
// @TODO: Add docs to     -webkit-align-self!
// Flex items can be aligned in the cross axis of the current line of the flex container, similar to justify-content but in the perpendicular direction. align-items sets the default alignment for all of the flex container’s items, including anonymous flex items. align-self allows this default alignment to be overridden for individual flex items. (For anonymous flex items, align-self always matches the value of align-items on their associated flex container.)
@mixin align-self($params) {
    -webkit-align-self: $params;
    -ms-align-self: $params;
    align-self: $params;
}

// 
// @TODO: Add docs to     -webkit-align-items!
// Flex items can be aligned in the cross axis of the current line of the flex container, similar to justify-content but in the perpendicular direction. align-items sets the default alignment for all of the flex container’s items, including anonymous flex items. align-self allows this default alignment to be overridden for individual flex items. (For anonymous flex items, align-self always matches the value of align-items on their associated flex container.)
@mixin align-items($params) {
    -webkit-align-items: $params;
    -ms-align-items: $params;
    align-items: $params;
}